/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;
import model.PersonDirectory;

/**
 *
 * @author anushkadarade
 */
public class CommunitySearch extends javax.swing.JPanel {

    /**
     * Creates new form CommunitySearch
     */
    JSplitPane SplitPane;
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;
    
    public CommunitySearch(JSplitPane SplitPane,PatientDirectory patientDirectory,PersonDirectory personDirectory) {
        initComponents();
        this.SplitPane = SplitPane;
        this.patientDirectory = patientDirectory;
        this.personDirectory = personDirectory;
        
        checkBoxAll.setSelected(true);
        txtCommunity.setText("");
        
        DefaultTableModel model = (DefaultTableModel) tblCommunitySearch.getModel();
        model.setRowCount(0);
        
        for(Patient p: patientDirectory.getPatientDirectory())
        {
            if(p.isAbnormal())
            {
             Object[] row = new Object[7];
             row[0]=p;
             row[1]=p.getPatientID();
             row[2]=p.isAbnormalPulse();
             row[3]=p.isAbnormalPulse();
             row[4]=p.isAbnormalTemperature();
             row[5]=p.getCommunity();
             row[6]=p.isAbnormal();
             
             model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCommunitySearch = new javax.swing.JTable();
        lblCommunity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        checkBoxAll = new javax.swing.JCheckBox();
        txtTotal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtnewcommunity = new javax.swing.JTextField();
        btnaddcommunity = new javax.swing.JButton();
        comboNewCommunity = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtnewcity = new javax.swing.JTextField();
        comboNewCity = new javax.swing.JComboBox<>();
        btnaddcity = new javax.swing.JButton();

        tblCommunitySearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient ID", "IsPulseAbnormal", "IsBPAbnormal", "IsTempAbnormal", "Community", "IsAbnormal"
            }
        ));
        jScrollPane1.setViewportView(tblCommunitySearch);

        lblCommunity.setText("Community:");

        txtCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommunityActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        checkBoxAll.setText("All");
        checkBoxAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Number:");

        jLabel2.setText("Add a New Community:");

        txtnewcommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnewcommunityActionPerformed(evt);
            }
        });

        btnaddcommunity.setText("ADD COMMUNITY");
        btnaddcommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddcommunityActionPerformed(evt);
            }
        });

        comboNewCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Roxbury", "Huntington Ave", "Jamaica Plain", "Bolyston" }));

        jLabel3.setText("Add a New City:");

        comboNewCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Boston", "Salem", "Cambridge", "Quincy" }));

        btnaddcity.setText("ADD CITY");
        btnaddcity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddcityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(164, 164, 164)
                                .addComponent(lblCommunity))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtnewcity, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                    .addComponent(txtnewcommunity))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxAll)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comboNewCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboNewCity, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnaddcommunity)
                                    .addComponent(btnaddcity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 83, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommunity)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxAll)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtnewcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboNewCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnaddcommunity))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtnewcity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboNewCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnaddcity))
                .addContainerGap(188, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllActionPerformed
        // TODO add your handling code here:
        if(checkBoxAll.isSelected())
        {
    //    checkBoxRoxbury.setSelected(false);
    //    checkBoxJamaica.setSelected(false);
    //    checkBoxBolyston.setSelected(false);
    //    checkBoxPark.setSelected(false);
        //checkBoxCustom.setSelected(false);
    //    checkBoxHunt.setSelected(false);
        
        populateTable(txtCommunity.getText(),0,100);
        }
    }//GEN-LAST:event_checkBoxAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if(checkBoxAll.isSelected())
        populateTable(txtCommunity.getText(),0,100);
       // else if(checkBoxCustom.isSelected())
        //{
         //   int Min = Integer.parseInt(txtMin.getText());
         //   int Max = Integer.parseInt(txtMax.getText());
         //   populateTable(txtCommunity.getText(),Min,Max);
        //}
        //else if(checkBoxPark.isSelected())
        //    populateTable(txtCommunity.getText(),61,100);
        //else if(checkBoxBolyston.isSelected())
        //    populateTable(txtCommunity.getText(),31,60);
        //else if(checkBoxJamaica.isSelected())
        //    populateTable(txtCommunity.getText(),16,30);
        //else if(checkBoxHunt.isSelected())
        //    populateTable(txtCommunity.getText(),4,15);
        //else if(checkBoxRoxbury.isSelected())
            populateTable(txtCommunity.getText(),0,3);
        //else{
        //    System.out.println("Exception");
        //}'
        
        String SearchString = txtCommunity.getText();
        DefaultTableModel model = (DefaultTableModel) tblCommunitySearch.getModel();
        model.setRowCount(0);
       
        for(Patient p: patientDirectory.getPatientDirectory())
        {
            System.out.println(SearchString);
            System.out.println(p.getCommunity());
            if(p.getCommunity().equals(SearchString))
            {
             Object[] row = new Object[7];
             row[0]=p;
             row[1]=p.getPatientID();
             row[2]=p.isAbnormalPulse();
             row[3]=p.isAbnormalPulse();
             row[4]=p.isAbnormalTemperature();
             row[5]=p.getCommunity();
             row[6]=p.isAbnormal();
             
             model.addRow(row);
             break;
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunityActionPerformed

    private void txtnewcommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnewcommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnewcommunityActionPerformed

    private void btnaddcommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddcommunityActionPerformed
        // TODO add your handling code here:
        //action performed on add button
        String addValue = txtnewcommunity.getText();
        comboNewCommunity.addItem(addValue);
        JOptionPane.showMessageDialog(this,"New Community Added");
        
        txtnewcommunity.setText("");
        
        //String Community = txtCommunity.getSelectedItem().toString();
        
    }//GEN-LAST:event_btnaddcommunityActionPerformed

    private void btnaddcityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddcityActionPerformed
        // TODO add your handling code here:
        String addValue = txtnewcity.getText();
        comboNewCity.addItem(addValue);
        JOptionPane.showMessageDialog(this,"New City Added");
        
        txtnewcity.setText("");
    }//GEN-LAST:event_btnaddcityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnaddcity;
    private javax.swing.JButton btnaddcommunity;
    private javax.swing.JCheckBox checkBoxAll;
    private javax.swing.JComboBox<String> comboNewCity;
    private javax.swing.JComboBox<String> comboNewCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JTable tblCommunitySearch;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtnewcity;
    private javax.swing.JTextField txtnewcommunity;
    // End of variables declaration//GEN-END:variables

    private void populateTable(String Community, int Min, int Max) {
        DefaultTableModel model = (DefaultTableModel) tblCommunitySearch.getModel();
        model.setRowCount(0);
        int x = 0;
        for(Patient p: patientDirectory.getPatientDirectory())
        {
            if(p.isAbnormal() && p.getCommunity().equals(Community) && p.getAge()>=Min && p.getAge()<=Max)
            {
             Object[] row = new Object[7];
             row[0]=p;
             row[1]=p.getPatientID();
             row[2]=p.isAbnormalPulse();
             row[3]=p.isAbnormalPulse();
             row[4]=p.isAbnormalTemperature();
             row[5]=p.getCommunity();
             row[6]=p.isAbnormal();
             
             model.addRow(row);
             x++;
            }
            else if(Community.equals("") && p.isAbnormal() && p.getAge()>=Min && p.getAge()<=Max)
            {
             Object[] row = new Object[7];
             row[0]=p;
             row[1]=p.getPatientID();
             row[2]=p.isAbnormalPulse();
             row[3]=p.isAbnormalPulse();
             row[4]=p.isAbnormalTemperature();
             row[5]=p.getCommunity();
             row[6]=p.isAbnormal();
             
             model.addRow(row);
             x++;
            }
        }
        txtTotal.setText(String.valueOf(x));
    }
}
